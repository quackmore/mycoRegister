server {
    listen 80;
    listen [::]:80;
    server_name 192.168.1.9;
    
    # More secure redirect with 301 (permanent) rather than 302
    return 301 https://$server_name$request_uri;
}

server {
    listen 443 ssl http2;  # Adding HTTP/2 support for better performance
    listen [::]:443 ssl http2;
    server_name 192.168.1.9;
    
    # Disguise server software
    server_tokens off;  # Hide NGINX version
    
    # SSL configuration - enhanced security
    ssl_certificate /etc/nginx/ssl/192.168.1.9.pem;
    ssl_certificate_key /etc/nginx/ssl/192.168.1.9-key.pem;
    ssl_protocols TLSv1.2 TLSv1.3;  # Disable older protocols
    ssl_prefer_server_ciphers on;
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
    ssl_session_timeout 1d;
    ssl_session_cache shared:SSL:10m;
    ssl_session_tickets off;
    
    # HSTS (optional but recommended for production)
    # add_header Strict-Transport-Security "max-age=63072000" always;
    
    # Security headers
    add_header X-Content-Type-Options nosniff;
    add_header X-Frame-Options SAMEORIGIN;
    add_header X-XSS-Protection "1; mode=block";
    
    # Frontend static files
    location / {
        root /home/flintheart/dev/mycoRegister/public;
        try_files $uri $uri/ /index.html;
        
        # Cache control for static assets
        location ~* \.(jpg|jpeg|png|gif|ico|css|js)$ {
            expires 7d;
            add_header Cache-Control "public, max-age=604800";
        }
        
        # Prevent access to hidden files
        location ~ /\. {
            deny all;
            access_log off;
            log_not_found off;
        }
    }
    
    # API requests to Node.js  
    location /api/ {
        proxy_pass http://localhost:3000;
        
        # Hide server identification headers
        proxy_hide_header X-Powered-By;
        proxy_hide_header Server;
        
        # Add generic server header
        add_header Server "Server" always;
        
        # Intercept and generalize error responses
        proxy_intercept_errors on;
        error_page 400 401 403 404 405 500 502 503 504 /api_error.json;
        
        # Additional headers and settings
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # Custom API error response location
    location = /api_error.json {
        add_header Content-Type application/json;
        return 200 '{"error": true, "message": "Request failed", "code": $status}';
        add_header Server "Server" always;
    }

    # DB requests to CouchDB (masked as generic API)
    location /db/ {
        # Authentication for database access (recommended)
        # auth_basic "Restricted Access";
        # auth_basic_user_file /etc/nginx/htpasswd;
        
        rewrite /db/(.*) /$1 break;
        proxy_pass http://localhost:5984;
        proxy_redirect off;
        
        # Headers
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Remove CouchDB-specific headers from responses
        proxy_hide_header Server;
        proxy_hide_header X-Couch-Request-ID;
        proxy_hide_header X-CouchDB-Body-Time;
        
        # Add generic headers to mask the actual server
        add_header Server "Server" always;
        
        # Custom error handling to mask CouchDB-specific errors
        proxy_intercept_errors on;
        error_page 400 401 403 404 405 409 412 415 416 417 /db_error.json;
        
        # Important for database replication and long-polling
        proxy_read_timeout 300s;
        proxy_connect_timeout 300s;
        
        # Buffer settings for database operations
        proxy_buffering off;  # Important for replication
        proxy_buffer_size 128k;
        proxy_buffers 4 256k;
        proxy_busy_buffers_size 256k;
        
        # WebSocket support for data synchronization
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        
        # Limiting methods for security
        # Uncomment if you want to restrict methods
        # limit_except GET POST PUT DELETE {
        #     deny all;
        # }
    }
    
    # Custom error response for database errors
    location = /db_error.json {
        add_header Content-Type application/json;
        return 200 '{"error": true, "message": "Database operation failed", "code": $status}';
        add_header Server "Server" always;
    }
    
    # Deny access to sensitive files
    location ~ \.(htaccess|htpasswd|ini|log|sh|inc|bak|git) {
        deny all;
    }
    
    # API rate limiting
    location /api/login {
        limit_req zone=api burst=10 nodelay;
        proxy_pass http://localhost:3000;
        
        # Forward headers as in the main API block
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
}